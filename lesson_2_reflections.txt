What happens when you initialize a repository? Why do you need to do it?

	The directory becomes a git repo with no commits. This enables "version-control"
	The hidden file ".git" is created and everything git related happens there.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area acts like a gatekeeper for what makes it from wd to repo. It allows you more control exactly 
	what changes should be committed. More specifically, it allows individual files to be both included or 
	excluded from next commit

How can you use the staging area to make sure you have one commit per logical change?
	
	Manage the files in the staging area until the logical change is complete before committing.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	* Trying out an experimental feature without affecting the working version
	* Start work on a different version of the project, while preserving same code base.
	* Isolate your work when working with other people.

	Branches allow me to make changes without worrying of breaking the main code base.
	Useful when sharing a project publicly while still working on it. 

How do the diagrams help you visualize the branch structure?

	A diagram allows me to see where a commit tree branched off and where the parents
	are.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	A single commit with the changes made in both branches over time. It preserves the history of both branches!

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	
	Pros: automatic merging is easy and it requires little work. 
	Cons: it gives little control over what the changes are


